@use '../utils/variables' as *;
@use '../utils/mixins' as *;

// Container
.container {
  @include container;
  
  &-fluid {
    width: 100%;
    padding-right: $spacing-md;
    padding-left: $spacing-md;
    margin-right: auto;
    margin-left: auto;
  }
  
  &-sm {
    @include container;
    max-width: $container-max-width-sm;
  }
  
  &-md {
    @include container;
    max-width: $container-max-width-md;
  }
  
  &-lg {
    @include container;
    max-width: $container-max-width-lg;
  }
}

// Row
.row {
  display: flex;
  flex-wrap: wrap;
  margin-right: -($grid-gutter-width / 2);
  margin-left: -($grid-gutter-width / 2);
  
  // Row modifiers
  &-no-gutters {
    margin-right: 0;
    margin-left: 0;
    
    > .col,
    > [class*="col-"] {
      padding-right: 0;
      padding-left: 0;
    }
  }
  
  // Alignment options
  &-center {
    justify-content: center;
  }
  
  &-start {
    justify-content: flex-start;
  }
  
  &-end {
    justify-content: flex-end;
  }
  
  &-between {
    justify-content: space-between;
  }
  
  &-around {
    justify-content: space-around;
  }
  
  &-middle {
    align-items: center;
  }
  
  &-top {
    align-items: flex-start;
  }
  
  &-bottom {
    align-items: flex-end;
  }
  
  &-stretch {
    align-items: stretch;
  }
}

// Column base styles
.col {
  position: relative;
  width: 100%;
  padding-right: $grid-gutter-width / 2;
  padding-left: $grid-gutter-width / 2;
  flex-basis: 0;
  flex-grow: 1;
  max-width: 100%;
}

// Column size generator
@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage($size / $columns);
  max-width: percentage($size / $columns);
}

// Generate column classes
@mixin make-grid-columns($breakpoint: "") {
  $infix: if($breakpoint == "", "", "-#{$breakpoint}");
  
  @for $i from 1 through $grid-columns {
    .col#{$infix}-#{$i} {
      @include make-col($i);
    }
  }
  
  // Offset columns
  @for $i from 0 through ($grid-columns - 1) {
    @if $i > 0 {
      .offset#{$infix}-#{$i} {
        margin-left: percentage($i / $grid-columns);
      }
    }
  }
  
  // Order classes
  .order#{$infix}-first {
    order: -1;
  }
  
  .order#{$infix}-last {
    order: $grid-columns + 1;
  }
  
  @for $i from 0 through $grid-columns {
    .order#{$infix}-#{$i} {
      order: $i;
    }
  }
}

// Create grid for all breakpoints
@include make-grid-columns();

@include respond-to(sm) {
  @include make-grid-columns("sm");
}

@include respond-to(md) {
  @include make-grid-columns("md");
}

@include respond-to(lg) {
  @include make-grid-columns("lg");
}

@include respond-to(xl) {
  @include make-grid-columns("xl");
}

// Auto layout columns
.col-auto {
  flex: 0 0 auto;
  width: auto;
  max-width: 100%;
}

@include respond-to(sm) {
  .col-sm-auto {
    flex: 0 0 auto;
    width: auto;
    max-width: 100%;
  }
}

@include respond-to(md) {
  .col-md-auto {
    flex: 0 0 auto;
    width: auto;
    max-width: 100%;
  }
}

@include respond-to(lg) {
  .col-lg-auto {
    flex: 0 0 auto;
    width: auto;
    max-width: 100%;
  }
}

@include respond-to(xl) {
  .col-xl-auto {
    flex: 0 0 auto;
    width: auto;
    max-width: 100%;
  }
}

// Flexbox utility classes
.d-flex { display: flex !important; }
.d-inline-flex { display: inline-flex !important; }

.flex-row { flex-direction: row !important; }
.flex-column { flex-direction: column !important; }
.flex-row-reverse { flex-direction: row-reverse !important; }
.flex-column-reverse { flex-direction: column-reverse !important; }

.flex-wrap { flex-wrap: wrap !important; }
.flex-nowrap { flex-wrap: nowrap !important; }
.flex-wrap-reverse { flex-wrap: wrap-reverse !important; }

.justify-content-start { justify-content: flex-start !important; }
.justify-content-end { justify-content: flex-end !important; }
.justify-content-center { justify-content: center !important; }
.justify-content-between { justify-content: space-between !important; }
.justify-content-around { justify-content: space-around !important; }
.justify-content-evenly { justify-content: space-evenly !important; }

.align-items-start { align-items: flex-start !important; }
.align-items-end { align-items: flex-end !important; }
.align-items-center { align-items: center !important; }
.align-items-baseline { align-items: baseline !important; }
.align-items-stretch { align-items: stretch !important; }

.align-content-start { align-content: flex-start !important; }
.align-content-end { align-content: flex-end !important; }
.align-content-center { align-content: center !important; }
.align-content-between { align-content: space-between !important; }
.align-content-around { align-content: space-around !important; }
.align-content-stretch { align-content: stretch !important; }

.align-self-auto { align-self: auto !important; }
.align-self-start { align-self: flex-start !important; }
.align-self-end { align-self: flex-end !important; }
.align-self-center { align-self: center !important; }
.align-self-baseline { align-self: baseline !important; }
.align-self-stretch { align-self: stretch !important; }

// Responsive flex utilities
@each $bp in (sm, md, lg, xl) {
  @include respond-to($bp) {
    .d-#{$bp}-flex { display: flex !important; }
    .d-#{$bp}-inline-flex { display: inline-flex !important; }
    
    .flex-#{$bp}-row { flex-direction: row !important; }
    .flex-#{$bp}-column { flex-direction: column !important; }
    .flex-#{$bp}-row-reverse { flex-direction: row-reverse !important; }
    .flex-#{$bp}-column-reverse { flex-direction: column-reverse !important; }
    
    .flex-#{$bp}-wrap { flex-wrap: wrap !important; }
    .flex-#{$bp}-nowrap { flex-wrap: nowrap !important; }
    .flex-#{$bp}-wrap-reverse { flex-wrap: wrap-reverse !important; }
    
    .justify-content-#{$bp}-start { justify-content: flex-start !important; }
    .justify-content-#{$bp}-end { justify-content: flex-end !important; }
    .justify-content-#{$bp}-center { justify-content: center !important; }
    .justify-content-#{$bp}-between { justify-content: space-between !important; }
    .justify-content-#{$bp}-around { justify-content: space-around !important; }
    .justify-content-#{$bp}-evenly { justify-content: space-evenly !important; }
    
    .align-items-#{$bp}-start { align-items: flex-start !important; }
    .align-items-#{$bp}-end { align-items: flex-end !important; }
    .align-items-#{$bp}-center { align-items: center !important; }
    .align-items-#{$bp}-baseline { align-items: baseline !important; }
    .align-items-#{$bp}-stretch { align-items: stretch !important; }
  }
} 